//Instuctions:
//Replace all SlotX and FormX to Slot[your desire slot number] and Form[num]
//The update address should be different with each eXtra slot, replace every 0x2000b0 to your own update address.

// Super Form Buddy Sprites
global u8 buddyForm7

// Checks if Buddy is standing
global bool Slot7IsStanding

// Checks if Buddy is Crouching
global bool Slot7IsCrouching

// Checks if Buddy is Looking up
global bool Slot7IsLookingUp

// Checks if Buddy has Jumped
global bool Slot7Jumped

// Checks if Buddy is Jumping
global bool Slot7IsJumping

// Checks if Buddy is Hurt/Shocked
global bool Slot7IsHurt

// Checks if Buddy is Celebrating
global bool Slot7IsVictory

//Buddy Respawn variable
global u8 Slot7RespawnTimer = 0

function void SpawnBuddy.Slot7()
{
    if (allocDynamicObjectStd())                                        // Get a memory address (or don't do anything if there is none available)
    {
        objA1.update_address = 0x200034                                   // Set an update address.
        objA1.render_flags = (render_flag.WORLD | render_flag.VISIBLE)    // Make sure the object renders correctly.

        objA1.box_size.x = 0x40                                            // Set its draw distance (how far off-screen can it go).
        objA1.box_size.y = 0x40
        
        objA1.position.x.u16 = objA0.position.x.u16                        // Same position as the object we spawn from (the monitor).
        objA1.position.y.u16 = objA0.position.y.u16
        
        objA1.value26 = System.rand()                                    // Random angle.
        objA1.animation.sprite = 1                // Random sprite, from 1 to 3.        // Random sprite, from 1 to 3.
    }
}

//# address-hook(0x200034)
function void Buddy.Slot7Update()
{
    UpdateMovementStraightSimple()                    // Movement function, uses objA0.velocity.x and y.
    A1 = 0xffffb000
if (objA0.position.x.u16 > objA1.position.x.u16)
    {
            objA0.render_flags |= render_flag.FLIP_X

    }
    else
    {
    objA0.render_flags &= ~render_flag.FLIP_X
    }
    if (System.getGlobalVariableValueByName("IsTaunting") == true && System.getGlobalVariableValueByName("TauntTimer") <= 17)
    {
        objA0.position.x.u16 = objA0.value32
        objA0.position.y.u16 = objA0.value3e
    }
    else
    {
        objA0.value32 = objA0.position.x.u16
        objA0.value3e = objA0.position.y.u16
    }
    if (global.game_mode == 0x0c && System.getGlobalVariableValueByName("IsTaunting") == true && global.zone != 0x15 && !debug_mode.state && (u8[0xffffb000 + 0x20] < char.state.DIED_GREY || u8[0xffffb000 + 0x20] > char.state.GOT_HURT || u8[0xffffb000 + 0x20] == char.state.GOT_HURT_PANIC))
    {
        SpriteHandle taunteffectSlot7 = Renderer.addSpriteHandle(keyForBud, objA0.position.x.u16, objA0.position.y.u16, 0x9f01)
        taunteffectSlot7.setFlags(0x20)
        taunteffectSlot7.setScale(0.6)
        if u16[0xffffb000 + 0x0a] & sprite_attribute.PRIORITY
            taunteffectSlot7.setPriorityFlag(1)
    }
    if (System.getGlobalVariableValueByName("IsTaunting") == true && System.getGlobalVariableValueByName("TauntTimer") <= 17)
    {
    Slot7IsStanding = false
    Slot7IsLookingUp = false
    Slot7IsVictory = true
    Slot7IsHurt = false
    Slot7IsCrouching = false
    }
    else
    {
    if (objA1.state != 0x13)
        Slot7IsVictory = false
    if (objA1.velocity.x == 0)
{
  objA0.velocity.x = 0
    Slot7IsStanding = true
    Slot7IsVictory = false
    Slot7IsLookingUp = false
    Slot7IsHurt = false
    Slot7IsCrouching = false
  }
    if (objA1.state == 0x08) 
{
   objA0.velocity.x = 0
    Slot7IsStanding = false
    Slot7IsHurt = false
    Slot7IsCrouching = true
  }
      if (objA1.state == 0x07) 
{
  objA0.velocity.x = 0
    Slot7IsStanding = false
    Slot7IsCrouching = false
    Slot7IsHurt = false
    Slot7IsLookingUp = true
  }
          if (objA1.state == 0x13) 
{
  objA0.velocity.x = 0
    objA0.velocity.y = 0
    IsStanding = false
    IsCrouching = false
    IsLookingUp = false
    Slot7IsHurt = false
    Slot7IsVictory = true
  }
  
        if (Slot7RespawnTimer == 210)
{

    objA0.position.x.u16 = objA1.position.x.u16                        // Same position as the object we spawn from (the monitor).
    objA0.position.y.u16 = objA1.position.y.u16
    Slot7RespawnTimer = 0
  }

    if (objA0.position.x.u16 < objA1.position.x.u16 - 60)
    {
        objA0.velocity.x += 0x60 + (System.rand() % 6) * 5
        Slot7IsStanding = false
        Slot7IsCrouching = false
        Slot7IsLookingUp = false
        Slot7IsVictory = false 
        Slot7IsHurt = false                  
    }
    else if (objA0.position.x.u16 > objA1.position.x.u16 + 60)
    {
    objA0.velocity.x -= 0x60 + (System.rand() % 6) * 5
    Slot7IsStanding = false
    Slot7IsCrouching = false
    Slot7IsLookingUp = false
    Slot7IsVictory = false   
    Slot7IsHurt = false   
    }
    
    if (objA0.position.x.u16 < objA1.position.x.u16 && objA0.velocity.x < 0)
    {
        objA0.velocity.x += 0x100 + (System.rand() % 21) * 5
    Slot7IsStanding = false
        Slot7IsCrouching = false
        Slot7IsLookingUp = false
        Slot7IsHurt = false
        Slot7IsVictory = false      
    }
    else if (objA0.position.x.u16 > objA1.position.x.u16 && objA0.velocity.x > 0)
    {
        objA0.velocity.x -= 0x100 + (System.rand() % 21) * 5
        Slot7IsStanding = false
        Slot7IsCrouching = false
        Slot7IsLookingUp = false
        Slot7IsHurt = false
        Slot7IsVictory = false      
    }
     if (objA1.state == 0x1a)  && (!super.active) && ((super.active.tails) == 0) || (objA1.state == 0x19) && (!super.active) && ((super.active.tails) == 0) || (objA1.state == 0x1b) && (!super.active) && ((super.active.tails) == 0)
{
  objA0.velocity.x = 0
    Slot7IsStanding = false
    Slot7IsCrouching = false
    Slot7IsLookingUp = false
    Slot7IsVictory = false
    Slot7IsHurt = true
  }

        //jumping stuffs
    bool jumpPressed = (control.player1.pressed & CONTROL_ABC) != 0

    if (!(buddyForm7 || super.active || super.active.tails) && jumpPressed && u8[0xffffb000 + 0x40] && !Slot7IsJumping && !u8[0xffffb000 + 0x2f])
        Slot7IsJumping = true

    if (Slot7IsJumping)
    {
        if (s16[0xffffb000 + 0x1a] < 0 && !Slot7Jumped && !u8[0xffffb000 + 0x2f])
            objA0.velocity.y = s16[0xffffb000 + 0x1a] * 4 / 5
        else
            Slot7Jumped = true
    }

    if (Slot7Jumped && !Slot7IsVictory)
    {
        CheckGroundCollision()
        if (D1.s16 < 0)
        {
            Slot7Jumped = false
            Slot7IsJumping = false
        }
    }

    if (buddyForm7 || super.active || super.active.tails)
    {
        Slot7Jumped = false
        Slot7IsJumping = false
    }

//if you want super to fly
    if (objA0.position.y.u16 < objA1.position.y.u16 && objA0.velocity.y < 0) && (super.active || buddyForm7 || super.active.tails)
    {
        objA0.velocity.y += 0x200 + (System.rand() % 25) * 5
    }
    else if (objA0.position.y.u16 < objA1.position.y.u16) && (super.active || buddyForm7 || super.active.tails)
    {
        objA0.velocity.y += 0x60 + (System.rand() % 9) * 5
    }
    else if (objA0.position.y.u16 > objA1.position.y.u16 && objA0.velocity.y > 0) && (super.active || buddyForm7 || super.active.tails)
    {
        objA0.velocity.y -= 0x200 + (System.rand() % 25) * 5
    }
    else if (objA0.position.y.u16 > objA1.position.y.u16) && (super.active || buddyForm7 || super.active.tails)
    {
        objA0.velocity.y -= 0x60 + (System.rand() % 9) * 5
    }
    else if (super.active || buddyForm7 || super.active.tails)
    {
        objA0.velocity.y = 0
    }
//end of super
    }
    
        // Summon Partner
    if (Input.buttonPressed(BUTTON_Y))
    {

    objA0.position.x.u16 = objA1.position.x.u16                        // Same position as the object we spawn from (the monitor).
        objA0.position.y.u16 = objA1.position.y.u16
    }
    if (!(super.active || buddyForm7 || super.active.tails) && !(System.getGlobalVariableValueByName("IsTaunting") == true && System.getGlobalVariableValueByName("TauntTimer") <= 17))
        objA0.velocity.y += u8[0xffffb000 + 0x2a] & char.flag.UNDERWATER ? 0x20 : 0x30
    if (objA0.velocity.y >= 0)
    {
        CheckGroundCollision()
        if (D1.s16 < 0)
        {
            objA0.position.y.u16 += D1.u16
            objA0.velocity.y = u16[A0 + 0x34]
            if (objA0.subtype2c != 0)
            {
                if (objA0.subtype2c != 0xa)
                {
                    objA0.velocity.x = -objA0.velocity.x
                    objA0.render_flags ^= render_flag.FLIP_X
    }
            }
        }
    }
    DrawObject()                                    // Draw the object (rendering done in the renderhook).
    
    if !(objA0.render_flags & render_flag.VISIBLE)     // Off-screen?
    {
    A1 = 0xffffb000

        Slot7RespawnTimer = Slot7RespawnTimer++

    }
    if (Slot7RespawnTimer == 270)
    {
    
        if (allocDynamicObjectStd())
        {
            // Spawn small explosion
            objA1.update_address = 0x01e68e
            objA1.position.x.u16 = objA0.position.x.u16
            objA1.position.y.u16 = objA0.position.y.u16
        }                        // Then unload. Make sure to do this at the end of the object's update function!
    }
} 

function bool Standalone.onWriteToSpriteTable(s16 px, s16 py, u16 renderQueue)
{
    
    if (objA0.update_address == 0x200034)                                                            // It's our object.
    {
                bool prioFlag = (objA0.sprite_attributes & 0x8000) != 0
        u64 key 
        if Slot7IsJumping && !Slot7IsVictory && (!super.active) && (!super.active.tails)
            key = stringformat("Mini_Slot7_Jump_0x%02x", ((level.framecounter>>2) % 3))
        else if (!super.active) && (buddyForm7 == 0x00) && Slot7IsStanding == false && Slot7IsCrouching == false && Slot7IsLookingUp  == false && Slot7IsVictory == false && ((super.active.tails) == 0) && !Slot7IsHurt                              
            key = stringformat("Mini_Slot7_0x%02x", ((level.framecounter>>2) % 2))
    //STANDING IDLE START HERE
        else if (!super.active) && (buddyForm7 == 0x00) && Slot7IsStanding && Slot7IsVictory == false && ((super.active.tails) == 0) && !Slot7IsHurt                                 
            key = stringformat("Idle_Mini_Slot7_0x%02x", ((level.framecounter>>2) & 0x00))
    // CROUCH SPRITES START
        else if (!super.active) && (buddyForm7 == 0x00) && Slot7IsCrouching && ((super.active.tails) == 0)
            key = stringformat("Mini_Slot7_Crouch2_0x%02x", ((level.framecounter>>2) & 0x00))
    //LOOKING UP SPRITES START HERE!!!
        else if (!super.active) && (buddyForm7 == 0x00) && Slot7IsLookingUp && ((super.active.tails) == 0) 
            key = stringformat("Mini_Slot7_LookUp2_0x%02x", ((level.framecounter>>2) & 0x00))
    //VICTORY SPRITES START HERE!!! 
        else if Slot7IsVictory
            key = stringformat("Mini_Slot7_Victory_0x%02x", ((level.framecounter>>3) % 4))
    //HURT SPRITES START HERE!!! 
    else if Slot7IsHurt
            key = stringformat("Mini_Slot7_Hurt_0x%02x", ((level.framecounter>>0) % 1))
    // SUPER SPRITES START HERE
        else if (super.active) || (buddyForm7 == 0x01) || (super.active.tails)          
            key = stringformat("Mini_Super_Slot72_0x%02x", ((level.framecounter>>2) % 2))
        
        u8 angle                                                                                    // Dividing this value by this amount and then multiplying it again makes it so that there is only a few possible angles.
        if (Game.getSetting(SETTING_SMOOTH_ROTATION))
        {
         
        }
        
        {
    
        }                                    // Set the sprite using the random value from the setup function.
        
        SpriteHandle BuddySlot7 = Renderer.addSpriteHandle(key, px, py, 0x9fff)
        BuddySlot7.setFlags(objA0.render_flags)
        BuddySlot7.setRotation(angle)
        if u16[0xffffb000 + 0x0a] & sprite_attribute.PRIORITY
            BuddySlot7.setPriorityFlag(1)
        return true                                                                                    // Make sure to return after!
    }
    return base.Standalone.onWriteToSpriteTable(px, py, renderQueue)                                // And then return the base.
}